"""
Djang settings for core project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from decouple import config
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = os.path.join(BASE_DIR, "logs")

# Ensure the logs directory exists
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-bx)!$s-b%g@l96_e)zbsce*@db8rlw%7mvj+(za%@5loa_e&ln'
SECRET_KEY = config("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=1, cast=bool)

# Application definition

INSTALLED_APPS = [
    # Django Core
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Core LMS Engine
    "core.assessment",
    "core.authentication",
    "core.course",
    "core.institution",
    "core.users",
    "core.utils",

    # 3rd Party
    "rest_framework",
    "corsheaders",
    "guardian",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.{}".format(
            config("DATABASE_ENGINE", default="sqlite3")
        ),
        "NAME": config("DATABSE_NAME", default="lms_db"),
        "USER": config("DATABASE_USER", default="lms_db_user"),
        "PASSWORD": config("DATABASE_PASSWORD", default="user1234"),
        "HOST": config("HOST", default="127.0.0.1"),
        "PORT": config("PORT", default="5432"),
    }
}

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # Default backend
    "guardian.backends.ObjectPermissionBackend",  # Add guardian
)
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "core.authentication.firebase.FirebaseAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


FIREBASE_ADMIN_SDK_CREDENTIALS_PATH = config(
    "FIREBASE_ADMIN_SDK_CREDENTIALS_PATH", default=""
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs/app.log"),
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "services": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "core": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Core API",
    "DESCRIPTION": "API for Core",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": True,
    "SERVE_URLCONF": "core.urls",
    "SCHEMA_PATH_PREFIX": "api/v1/docs/",
    "POSTPROCESSING_HOOKS": ["core.utils.schema.add_x_tag_groups"],
    "TAGS": [
        {
            "name": "Auth",
            "description": "Endpoints for authentication and user management",
        },
        {
            "name": "Assessment",
            "description": "Endpoints for assessments and related operations",
        },
        {"name": "Course", "description": "Endpoints for course management"},
        {"name": "Institution", "description": "Endpoints for institution management"},
        {"name": "User", "description": "Endpoints for user management"},
        {
            "name": "Module",
            "description": "Endpoints for modules and related operations",
        },
        {
            "name": "Section",
            "description": "Endpoints for sections and related operations",
        },
        {
            "name": "Question",
            "description": "Endpoints for questions and related operations",
        },
        {
            "name": "Course Instance",
            "description": "Endpoints for course instances and related operations",
        },
        {
            "name": "Video Assessment",
            "description": "Endpoints for video assessments and related operations",
        },
        {
            "name": "StandAlone Assessment",
            "description": "Endpoints for stand alone assessments and related operations",
        },
        {
            "name": "Solution",
            "description": "Endpoints for solutions and related operations",
        },
        {
            "name": "UserInstitution",
            "description": "Endpoints for user-institution relationships",
        },
        {
            "name": "UserCourseInstance",
            "description": "Endpoints for user-course enrollments",
        },
   ],
}
